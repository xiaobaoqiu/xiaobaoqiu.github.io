<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | xiaobaoqiu Blog]]></title>
  <link href="http://xiaobaoqiu.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://xiaobaoqiu.github.io/"/>
  <updated>2015-08-04T23:59:23+08:00</updated>
  <id>http://xiaobaoqiu.github.io/</id>
  <author>
    <name><![CDATA[xiaobaoqiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven-compiler-plugin]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2015/04/09/maven-compiler-plugin/"/>
    <updated>2015-04-09T07:04:59+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2015/04/09/maven-compiler-plugin</id>
    <content type="html"><![CDATA[<p>今天项目发布的出现一个异常：
<code>
Unsupported major.minor version 51.0 (unable to load class XXX)
</code>
一看到这个51.0,直觉想起了JDK 1.7。追查问题发现是新定义了maven-compiler-plugin，并且指定了版本为1.7,但是线上应用机器上的JDK版本是1.6,导致编译产生的1.7版本的class文件在1.6(version为50)上无法执行。</p>

<p>maven-compiler-plugin用来指定编译时候的JDK版本
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugin&gt;
</span><span class='line'>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
</span><span class='line'>    &lt;version&gt;3.1&lt;/version&gt;
</span><span class='line'>    &lt;configuration&gt;
</span><span class='line'>        &lt;source&gt;1.7&lt;/source&gt; &lt;!-- 源代码使用的开发版本 --&gt;
</span><span class='line'>        &lt;target&gt;1.7&lt;/target&gt; &lt;!-- 需要生成的目标class文件的编译版本 --&gt;
</span><span class='line'>        &lt;!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 --&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    &lt;!-- 这下面的是可选项 --&gt;
</span><span class='line'>    &lt;meminitial&gt;128m&lt;/meminitial&gt;
</span><span class='line'>    &lt;maxmem&gt;512m&lt;/maxmem&gt;
</span><span class='line'>    &lt;fork&gt;true&lt;/fork&gt; &lt;!-- fork is enable,用于明确表示编译版本配置的可用 --&gt; 
</span><span class='line'>    &lt;compilerVersion&gt;1.3&lt;/compilerVersion&gt;
</span><span class='line'>
</span><span class='line'>    &lt;!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 --&gt;
</span><span class='line'>    &lt;compilerArgument&gt;-verbose -bootclasspath ${java.home}\lib\rt.jar&lt;/compilerArgument&gt;
</span><span class='line'>
</span><span class='line'>&lt;/configuration&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;/plugin&gt;</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
