<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | xiaobaoqiu Blog]]></title>
  <link href="http://xiaobaoqiu.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://xiaobaoqiu.github.io/"/>
  <updated>2015-08-01T11:57:33+08:00</updated>
  <id>http://xiaobaoqiu.github.io/</id>
  <author>
    <name><![CDATA[xiaobaoqiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maven-compiler-plugin]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2015/04/09/maven-compiler-plugin/"/>
    <updated>2015-04-09T07:04:59+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2015/04/09/maven-compiler-plugin</id>
    <content type="html"><![CDATA[<p>今天项目发布的出现一个异常：
<code>
Unsupported major.minor version 51.0 (unable to load class XXX)
</code>
一看到这个51.0,直觉想起了JDK 1.7。追查问题发现是新定义了maven-compiler-plugin，并且指定了版本为1.7,但是线上应用机器上的JDK版本是1.6,导致编译产生的1.7版本的class文件在1.6(version为50)上无法执行。</p>

<p>maven-compiler-plugin用来指定编译时候的JDK版本
```
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.1</version>
    <configuration>
        <source>1.7</source> <!-- 源代码使用的开发版本 -->
        <target>1.7</target> <!-- 需要生成的目标class文件的编译版本 -->
        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 --></p>

<pre><code>    &lt;!-- 这下面的是可选项 --&gt;
    &lt;meminitial&gt;128m&lt;/meminitial&gt;
    &lt;maxmem&gt;512m&lt;/maxmem&gt;
    &lt;fork&gt;true&lt;/fork&gt; &lt;!-- fork is enable,用于明确表示编译版本配置的可用 --&gt; 
    &lt;compilerVersion&gt;1.3&lt;/compilerVersion&gt;

    &lt;!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 --&gt;
    &lt;compilerArgument&gt;-verbose -bootclasspath ${java.home}\lib\rt.jar&lt;/compilerArgument&gt;

&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>
]]></content>
  </entry>
  
</feed>
