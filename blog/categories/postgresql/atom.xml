<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgresql | xiaobaoqiu Blog]]></title>
  <link href="http://xiaobaoqiu.github.io/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://xiaobaoqiu.github.io/"/>
  <updated>2015-08-01T12:02:55+08:00</updated>
  <id>http://xiaobaoqiu.github.io/</id>
  <author>
    <name><![CDATA[xiaobaoqiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2014/05/20/postgresql/"/>
    <updated>2014-05-20T21:37:19+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2014/05/20/postgresql</id>
    <content type="html"><![CDATA[<h2>1.什么是PostgreSQL</h2>

<p>The World&rsquo;s most advanced open source database.</p>

<p>PostgreSQL is a powerful, open source object-relational database system.</p>

<p>主页：<a href="http://www.postgresql.org/">http://www.postgresql.org/</a></p>

<p>支持的系统：Linux, UNIX (AIX, BSD, HP-UX, SGI IRIX, Mac OS X, Solaris, Tru64), and Windows.</p>

<p>功能：has full support for foreign keys, joins, views, triggers, and stored procedures.</p>

<p>数据类型：It includes most SQL:2008 data types, including INTEGER, NUMERIC, BOOLEAN, CHAR, VARCHAR, DATE, INTERVAL, and TIMESTAMP. It also supports storage of binary large objects, including pictures, sounds, or video.此外，用户可以创建自定义数据类型，通常通过PostgreSQL的GiST机制，它们也能被很好得索引，比如PostGIS地理信息系统的数据类型.</p>

<p>语言支持：It has native programming interfaces for C/C++, Java, .Net, Perl, Python, Ruby, Tcl, ODBC, among others, and exceptional documentation.</p>

<p>用户手册：
<code>
http://www.postgresql.org/docs/manuals/
http://www.highgo.com.cn/docs/docs90cn/index.html
</code></p>

<p>大小限制：</p>

<p>Maximum Database Size   Unlimited</p>

<p>Maximum Table Size  32 TB</p>

<p>Maximum Row Size    1.6 TB</p>

<p>Maximum Field Size  1 GB</p>

<p>Maximum Rows per Table  Unlimited</p>

<p>Maximum Columns per Table   250 - 1600 depending on column types</p>

<p>Maximum Indexes per Table   Unlimited</p>

<p>扩展库：</p>

<p>(1)地理数据对象：PostGIS GPL</p>

<p>(2)全文检索：通过Tsearch2或OpenFTS</p>

<p>人物：老何</p>

<h2>2.PostgreSQL历史</h2>

<p>参见wiki：
<code>
http://zh.wikipedia.org/wiki/PostgreSQL
</code></p>

<h2>3.PostgreSQL VS MySQL</h2>

<p>MySQL：Slashdot、Twitter、Facebook、Wikipedia</p>

<p>PostgreSQL：Yahoo、Disqus</p>

<h2>4.PostgreSQL安装</h2>

<h4>1. 命令行安装（Ubuntu为例子）</h4>

<h5>(1)安装PostgreSQL客户端</h5>

<pre><code>sudo apt-get install postgresql-client
</code></pre>

<h5>(2)安装PostgreSQL服务器</h5>

<pre><code>sudo apt-get install postgresql
</code></pre>

<p>正常情况下，安装完成后，PostgreSQL服务器会自动在本机的5432端口开启。</p>

<h5>(3)安装图形管理界面：</h5>

<pre><code>sudo apt-get install pgadmin3
</code></pre>

<h5>(4)安装PostGis：</h5>

<pre><code>sudo apt-get install postgresql-9.1-postgis
</code></pre>

<p>本机安装的时候，postgresql-9.1-postgis最终的postgis版本为1.5</p>

<h4>2. 可视化安装</h4>

<h5>(1)安装包：</h5>

<pre><code>http://www.enterprisedb.com/products-services-training/pgdownload
</code></pre>

<h5>(2)安装PostgreSQL</h5>

<p>下载完成之后，直接安装（Ubuntu为例）：
<code>
xiaobaoqiu@xiaobaoqiu:~/Download$ sudo ./postgresql-9.3.4-3-linux-x64.run
</code></p>

<h5>(3)安装PostGis</h5>

<p>在安装快结束的时候要将StackBuilder那个勾打上，可以用来下载安装扩展工具包。Finish之后进入StackBuiler选择本地的PostgreSQL，点next，之后在展开Spatial Extensions下勾选PostGIS，则会下载安装PostGis。</p>

<h5>(4)设置环境变量</h5>

<pre><code>/etc/profile 加上 /opt/PostgreSQL/9.3/bin
</code></pre>

<h2>5.PostgreSQL简单使用</h2>

<h5>1. 查看版本</h5>

<pre><code>xiaobaoqiu@xiaobaoqiu:/var/run/postgresql$ psql --version
psql (PostgreSQL) 9.3.4
</code></pre>

<p>初次安装后，默认生成一个名为postgres的数据库和一个名为postgres的数据库用户。这里需要注意的是，同时还生成了一个名为postgres的Linux系统用户。</p>

<h5>2. 登录 psql -h host -U user -d database_name -p port</h5>

<p>PostgreSQL默认端口为5432,-d参数指定数据库名称：
<code>
xiaobaoqiu@xiaobaoqiu:/var/run/postgresql$ psql -h localhost -U postgres
Password for user postgres:
psql.bin (9.3.4)
Type "help" for help.
</code></p>

<h5>3. 退出</h5>

<pre><code>\q
</code></pre>

<h5>4. 所有用户</h5>

<pre><code>postgis_template=# \du
                             List of roles
 Role name |                   Attributes                   | Member of 
-----------+------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication | {}
</code></pre>

<h5>4. 连接信息</h5>

<pre><code>postgres=# \conninfo
You are connected to database "postgres" as user "postgres" on host "localhost" at port "5432".
</code></pre>

<h5>4. show databases</h5>

<pre><code>hotel=# \l
                                      List of databases
        Name         |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
---------------------+----------+----------+------------+------------+-----------------------
 fb_stat             | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
</code></pre>

<h5>5. switch database</h5>

<pre><code>postgres=# \c postgis_template
You are now connected to database "postgis_template" as user "postgres".
</code></pre>

<h5>6. show tables</h5>

<p>\d 显示所有表
```
postgis_template=# \d
                 List of relations
  Schema  |       Name        |   Type   |  Owner <br/>
&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;-
 public   | geography_columns | view     | postgres
 public   | geometry_columns  | view     | postgres
 public   | spatial_ref_sys   | table    | postgres
 topology | layer             | table    | postgres
 topology | topology          | table    | postgres
 topology | topology_id_seq   | sequence | postgres
(6 rows)</p>

<pre><code>\d table_name
</code></pre>

<p>postgis_template=# \d geography_columns
     View &ldquo;public.geography_columns&rdquo;
       Column       |  Type   | Modifiers
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;
 f_table_catalog    | name    |
 f_table_schema     | name    |
 f_table_name       | name    |
 f_geography_column | name    |
 coord_dimension    | integer |
 srid               | integer |
 type               | text    |</p>

<pre><code>
#####7. 数据库操作
基本的数据库操作，就是使用一般的SQL语言:
</code></pre>

<h1>创建表</h1>

<p>CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);</p>

<h1>插入数据</h1>

<p>INSERT INTO user_tbl(name, signup_date) VALUES(&lsquo;张三&rsquo;, &lsquo;2013-12-22&rsquo;);</p>

<h1>选择记录</h1>

<p>SELECT * FROM user_tbl;</p>

<h1>更新数据</h1>

<p>UPDATE user_tbl set name = &lsquo;李四&rsquo; WHERE name = &lsquo;张三&rsquo;;</p>

<h1>删除记录</h1>

<p>DELETE FROM user_tbl WHERE name = &lsquo;李四&rsquo; ;</p>

<h1>添加列</h1>

<p>ALTER TABLE user_tbl ADD email VARCHAR(40);</p>

<h1>更新表结构</h1>

<p>ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;</p>

<h1>更名列</h1>

<p>ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;</p>

<h1>删除列</h1>

<p>ALTER TABLE user_tbl DROP COLUMN email;</p>

<h1>表格更名</h1>

<p>ALTER TABLE user_tbl RENAME TO backup_tbl;</p>

<h1>删除表格</h1>

<p>DROP TABLE IF EXISTS backup_tbl;</p>

<pre><code>
#####8. PostgreSQL Client支持的一些命令（直接在shell运行）：
</code></pre>

<p>clusterdb &ndash; cluster a PostgreSQL database
createdb &ndash; create a new PostgreSQL database
createlang &ndash; install a PostgreSQL procedural language
createuser &ndash; define a new PostgreSQL user account
dropdb &ndash; remove a PostgreSQL database
droplang &ndash; remove a PostgreSQL procedural language
dropuser &ndash; remove a PostgreSQL user account
ecpg &ndash; embedded SQL C preprocessor
pg_basebackup &ndash; take a base backup of a PostgreSQL cluster
pg_config &ndash; retrieve information about the installed version of PostgreSQL
pg_dump &ndash;  extract a PostgreSQL database into a script file or other archive file
pg_dumpall &ndash; extract a PostgreSQL database cluster into a script file
pg_receivexlog &ndash; streams transaction logs from a PostgreSQL cluster
pg_restore &ndash;  restore a PostgreSQL database from an archive file created by pg_dump
psql &ndash;  PostgreSQL interactive terminal
reindexdb &ndash; reindex a PostgreSQL database
vacuumdb &ndash; garbage-collect and analyze a PostgreSQL database</p>

<pre><code>##6.Client
#####1.JDBC Driver
</code></pre>

<p><a href="http://jdbc.postgresql.org/">http://jdbc.postgresql.org/</a></p>

<pre><code>
#####2.maven package:
</code></pre>

<!--postgresql-->


<p><dependency>
    <groupId>postgresql</groupId>
    <artifactId>postgresql</artifactId>
</dependency></p>

<pre><code>
##7.PostGis
PostGIS是一个重要的开源GIS基础软件，因为目前它是为数不多的开源空间数据库存储方案之一，它为PostgreSQL提供了存储空间地理数据的支持，使PostgreSQL成为了一个空间数据库，能够进行空间数据管理、数量测量与几何拓扑分析。

支持空间对象模型：点、折线、多边形、多点、多折线、多多边形与几何集合。

空间分析功能：如求交、求并、求差、缓冲区等;

空间索引：利用R-tree与GiST实现了空间索引，大大加快了正交查询的速度;

存储：Well-known text与well-known binary，前者是一种用文本表示空间对象的注记方法，后者是一种用二进制流表示空间对象的存储方法。PostGIS使用中两种格式在数据库中存储空间对象。

手册：
</code></pre>

<p><a href="http://postgis.net/docs/manual-2.0/">http://postgis.net/docs/manual-2.0/</a>
<a href="http://workshops.boundlessgeo.com/postgis-intro/">http://workshops.boundlessgeo.com/postgis-intro/</a></p>

<pre><code>Geography：latitude/longitude，球坐标

常用4326坐标系统，4326坐标系统指的是WGS 84（World Geodetic System，世界坐标系）标准提供地球的球体参照面，是全球定位系统（Global Positioning System，简称 GPS）使用的空间参照系。WGS 84的坐标原点是地球的质心，精度可达到 ±1 米。WGS 84坐标单位是度，其中，第一个坐标是经度，范围是 -180 到 180；第二个坐标是纬度，范围是 -90 到 90。
</code></pre>

<p>Los Angeles: POINT(-118.4079 33.9434)
Paris: POINT(2.3490 48.8533)</p>

<h1>距离</h1>

<p>SELECT ST_Distance(
  ST_GeometryFromText(&lsquo;POINT(-118.4079 33.9434)&rsquo;, 4326), &ndash; Los Angeles (LAX)
  ST_GeometryFromText(&lsquo;POINT(2.5559 49.0083)&rsquo;, 4326)     &ndash; Paris (CDG)
  );
121.898285970107度</p>

<h1>距离米</h1>

<p>SELECT ST_Distance(
  ST_GeographyFromText(&lsquo;POINT(-118.4079 33.9434)&rsquo;), &ndash; Los Angeles (LAX)
  ST_GeographyFromText(&lsquo;POINT(2.5559 49.0083)&rsquo;)     &ndash; Paris (CDG)
  );
9124665.26917268米</p>

<pre><code>
Geometry ：几何坐标
</code></pre>

<p>ST_AsText</p>

<h1>点</h1>

<p>ST_X ST_Y</p>

<h1>线</h1>

<p>ST_Length 线长度
ST_StartPoint 起点
ST_EndPoint 终点
ST_NPoints 点数</p>

<h1>多边形</h1>

<p>ST_Area(geometry)面积
ST_NRings(geometry)环个数
ST_ExteriorRing(geometry) 外接环
ST_InteriorRingN(geometry,n) 内接环
ST_Perimeter(geometry) 所有环的长度</p>

<h1>集合</h1>

<p>MultiPoint, a collection of points
MultiLineString, a collection of linestrings
MultiPolygon, a collection of polygons
GeometryCollection, a heterogeneous collection of any geometry (including other collections)</p>

<pre><code class="">实用case：
gpoint表示坐标：
</code></pre>

<p> gpoint       | geography(Point,4326)       |</p>

<pre><code>距离坐标(117.28243891065 39.096105298613)最近的10个地标数据（在1km以内搜索）：
</code></pre>

<p>SELECT id, name, city_code, st_astext(gpoint) FROM poi
WHERE ST_DWithin(GeomFromText(&lsquo;POINT(117.28243891065 39.096105298613)&rsquo;,4326), gpoint, 1000)
ORDER BY ST_Distance(GeomFromText(&lsquo;POINT(117.28243891065 39.096105298613)&rsquo;,4326), gpoint)
LIMIT 10;</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
