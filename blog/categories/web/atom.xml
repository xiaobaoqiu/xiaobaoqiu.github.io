<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | xiaobaoqiu Blog]]></title>
  <link href="http://xiaobaoqiu.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://xiaobaoqiu.github.io/"/>
  <updated>2015-08-01T11:57:33+08:00</updated>
  <id>http://xiaobaoqiu.github.io/</id>
  <author>
    <name><![CDATA[xiaobaoqiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Form Data vs Request Payload]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2014/09/04/form-data-vs-request-payload/"/>
    <updated>2014-09-04T18:57:28+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2014/09/04/form-data-vs-request-payload</id>
    <content type="html"><![CDATA[<p>HTTP请求中的form data和request payload的区别</p>

<p>AJAX Post请求中常用的两种传参数的形式：form data 和 request payload</p>

<h1>Form data</h1>

<p>get请求的时候，我们的参数直接反映在url里面，形式为key1=value1&amp;key2=value2形式，比如：
<code>
http://news.baidu.com/ns?word=NBA&amp;tn=news&amp;from=news&amp;cl=2&amp;rn=20&amp;ct=1
</code>
如果是post请求，那么表单参数是在请求体中，也是以key1=value1&amp;key2=value2的形式在请求体中。通过chrome的开发者工具可以看到如下：
```
RequestURL:<a href="http://127.0.0.1:8080/test/test.do">http://127.0.0.1:8080/test/test.do</a>
Request Method:POST
Status Code:200 OK</p>

<p>Request Headers
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8
Accept-Encoding:gzip,deflate,sdch
Accept-Language:zh-CN,zh;q=0.8,en;q=0.6
AlexaToolbar-ALX_NS_PH:AlexaToolbar/alxg-3.2
Cache-Control:max-age=0
Connection:keep-alive
Content-Length:25
Content-Type:application/x-www-form-urlencoded
Cookie:JSESSIONID=74AC93F9F572980B6FC10474CD8EDD8D
Host:127.0.0.1:8080
Origin:<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a>
Referer:<a href="http://127.0.0.1:8080/test/index.jsp">http://127.0.0.1:8080/test/index.jsp</a>
User-Agent:Mozilla/5.0 (Windows NT 6.1)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.149 Safari/537.36</p>

<p>Form Data
name:mikan
address:street</p>

<p>Response Headers
Content-Length:2
Date:Sun, 11 May 2014 11:05:33 GMT
Server:Apache-Coyote/1.1
```
这里要注意post请求的Content-Type为application/x-www-form-urlencoded（默认的），参数是在请求体中，即上面请求中的Form Data。</p>

<p>前端：
<code>
xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xhr.send("name=foo&amp;value=bar");
</code></p>

<p>在servlet中，可以通过request.getParameter(name)的形式来获取表单参数。
<code>
/**
 * 获取httpRequest的参数
 *
 * @param request
 * @param name
 * @return
 */
protected String getParameterValue(HttpServletRequest request, String name) {
    return StringUtils.trimToEmpty(request.getParameter(name));
}
</code></p>

<h1>Request payload</h1>

<p>如果使用原生AJAX POST请求的话，那么请求在chrome的开发者工具的表现如下，主要是参数在
```
Remote Address:192.168.234.240:80
Request URL:<a href="http://tuanbeta3.XXX.com/qimage/upload.htm">http://tuanbeta3.XXX.com/qimage/upload.htm</a>
Request Method:POST
Status Code:200 OK</p>

<p>Request Headers
Accept:application/json, text/javascript, <em>/</em>; q=0.01
Accept-Encoding:gzip,deflate,sdch
Accept-Language:zh-CN,zh;q=0.8,en;q=0.6
Connection:keep-alive
Content-Length:151
Content-Type:application/json;charset=UTF-8
Cookie:JSESSIONID=E08388788943A651924CA0A10C7ACAD0
Host:tuanbeta3.XXX.com
Origin:<a href="http://tuanbeta3.XXX.com">http://tuanbeta3.XXX.com</a>
Referer:<a href="http://tuanbeta3.XXX.com/qimage/customerlist.htm?menu=19">http://tuanbeta3.XXX.com/qimage/customerlist.htm?menu=19</a>
User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36
X-Requested-With:XMLHttpRequest</p>

<p>Request Payload
[{widthEncode:NNNcaXN, heightEncode:NNNN5NN, displayUrl:201409/03/66I5P266rtT86oKq6,…}]</p>

<p>Response Headers
Connection:keep-alive
Content-Encoding:gzip
Content-Type:application/json;charset=UTF-8
Date:Thu, 04 Sep 2014 06:49:44 GMT
Server:nginx/1.4.7
Transfer-Encoding:chunked
Vary:Accept-Encoding
```
注意请求的Content-Type为application/json;charset=UTF-8，而请求表单参数在Request Payload中。</p>

<p>后端获取（这里使用org.apache.commons.io.）：
<code>
/**
 * 从 request 获取 payload 数据
 *
 * @param request
 * @return
 * @throws IOException
 */
private String getRequestPayload(HttpServletRequest request) throws IOException {
    return IOUtils.toString(request.getReader());
}
</code></p>

<h1>二者区别</h1>

<p>参考：<a href="http://stackoverflow.com/questions/10494574/what-is-the-difference-between-form-data-and-request-payload">http://stackoverflow.com/questions/10494574/what-is-the-difference-between-form-data-and-request-payload</a></p>

<p>if a request (typically POST) has Content-type header set to application/x-www-form-urlencoded the body is expected to be in the form of a standard querystring with url-encoded key=value pairs joined by &amp;. Form data section then shows the key-value parameters (when viewed parsed). This way was much more common in past because it is a default for HTML forms.</p>

<p>other cases are shown in Request payload section (and nowadays parsed for readability as well for common formats like JSON).</p>

<p>如果请求的Content-Type设置为application/x-www-form-urlencoded，那么这个Post请求被认为是HTTP POST表单请求，参数出现在</p>

<p>其他情况如使用原生AJAX的POST请求如果不指定请求头Request Header，默认使用的Content-Type是text/plain;charset=UTF-8，参数出现在Request payload块。</p>
]]></content>
  </entry>
  
</feed>
