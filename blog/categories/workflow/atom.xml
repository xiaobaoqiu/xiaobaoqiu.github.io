<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Workflow | xiaobaoqiu Blog]]></title>
  <link href="http://xiaobaoqiu.github.io/blog/categories/workflow/atom.xml" rel="self"/>
  <link href="http://xiaobaoqiu.github.io/"/>
  <updated>2017-02-03T11:50:41+08:00</updated>
  <id>http://xiaobaoqiu.github.io/</id>
  <author>
    <name><![CDATA[xiaobaoqiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Activiti自动流转任务]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2017/02/03/activitizi-dong-liu-zhuan-ren-wu/"/>
    <updated>2017-02-03T10:53:39+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2017/02/03/activitizi-dong-liu-zhuan-ren-wu</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1.%E8%87%AA%E5%8A%A8%E6%B5%81%E8%BD%AC%E4%BB%BB%E5%8A%A1">1.自动流转任务</a></li>
<li><a href="#2.%E5%AE%9E%E7%8E%B0">2.实现</a>

<ul>
<li><a href="#2.1%20ServiceTask">2.1 ServiceTask</a></li>
<li><a href="#2.2%20%E4%B8%BB%E5%8A%A8%E8%A7%A6%E5%8F%91UserTask">2.2 主动触发UserTask</a></li>
<li><a href="#2.3%20%E5%BC%82%E6%AD%A5%E8%A7%A6%E5%8F%91UserTask">2.3 异步触发UserTask</a></li>
<li><a href="#2.4%20%E5%AF%B9%E6%AF%94%E9%80%89%E6%8B%A9">2.4 对比选择</a></li>
</ul>
</li>
</ul>


<h2 id="1.自动流转任务">1.自动流转任务</h2>


<p>用户任务是审核流程中最重要的节点, 在流程设计中通常会遇到需要自动流转的需求, 比如请假半天的自动通过.</p>

<h2 id="2.实现">2.实现</h2>


<p>下面是我能想到的几种实现自动流转任务方式.</p>

<h4 id="2.1 ServiceTask">2.1 ServiceTask</h4>


<p>Activiti的设计者已经考虑到我们这个需求,因此在引入了 ServiceTask 这中类型的任务.参考 Activiti 的文档: <a href="https://www.activiti.org/userguide/index.html#bpmnJavaServiceTask">https://www.activiti.org/userguide/index.html#bpmnJavaServiceTask</a>
ServiceTask的目的是调用我们自定义的一个Java类:</p>

<pre><code>A Java service task is used to invoke an external Java class.
</code></pre>

<p>ServiceTask 的使用方式也有几种:</p>

<pre><code>1. 自定义类实现 JavaDelegate 或者 ActivityBehavior 接口;
2. 设计流程的时候, 显示的告诉 Activiti 引擎需要调用的 Bean;
3. 调用一个方法表达式;
4. 调用一个求值表达式;
</code></pre>

<p>下面审核一个示例的自定义ServiceTask调研逻辑
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.activiti.engine.delegate.DelegateExecution;
</span><span class='line'>import org.activiti.engine.delegate.JavaDelegate;
</span><span class='line'>import org.springframework.stereotype.Service;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/&lt;em&gt;*
</span><span class='line'> * 自动完成的任务(ServiceTask)
</span><span class='line'> *
</span><span class='line'> * @author xiaobaoqiu  Date: 16-12-23 Time: 下午3:46
</span><span class='line'> &lt;/em&gt;/
</span><span class='line'>@Service
</span><span class='line'>public class AutoCompleteTaskService implements JavaDelegate {&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@Override
</span><span class='line'>public void execute(DelegateExecution execution) throws Exception {
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}</span></code></pre></td></tr></table></div></figure></p>

<p>回到我们的需求上, 要实现我们需要的自动流转任务, 我们可以使用 ServiceTask, 以上面定义的 AutoCompleteTaskService 为例子:</p>

<pre><code># 方式1
&lt;serviceTask id="javaService"
             name="My Java Service Task"
             activiti:class="org.xxx.AutoCompleteTaskService" /&gt;

# 方式2
&lt;bean id="delegateExpressionBean" class="org.xxx.AutoCompleteTaskService" /&gt;
&lt;serviceTask id="serviceTask" activiti:delegateExpression="${delegateExpressionBean}" /&gt;
</code></pre>

<p>但是这种实现方式的一个致命的问题在于:流程设计的时候你需要知道你要调用的Java逻辑的类路径或者Bean的名称.</p>

<p>为什么说是致命的呢,因为这个的实现方式就没办法将流程设计交付给开发人员以外的其他人员了(他们不可能知道类路径或者bean名称这种信息).</p>

<p>下面我使用普通的 UserTask 来实现我们的需求.</p>

<h4 id="2.2 主动触发UserTask">2.2 主动触发UserTask, </h4>


<p>我们将自动流转任务也设计成UserTask, 由业务自己主动触发.</p>

<p>比如请假半天的自动通过的例子, 业务可以在提交请假的时候判断, 让这个任务自动完成.</p>

<p>这种实现的问题在于: 业务逻辑实现起来太麻烦, 很容易出Bug(比如自动通过失败,可能会导致提交这个操作失败).</p>

<h4 id="2.3 异步触发UserTask">2.3 异步触发UserTask</h4>


<p>在上一个方法的基础上, 我们可以将自动生效的逻辑放到异步任务里面,可以避免将原始业务逻辑复杂化.</p>

<p>但是我们需要筛选出哪些 UserTask 可以自动完成,因此我的方案就是给这些任务制定特定的任务类型.关于任务类型, 可以参考我前面的博文: <a href="http://xiaobaoqiu.github.io/blog/2016/12/29/activitiren-wu-zeng-jia-shu-xing/">http://xiaobaoqiu.github.io/blog/2016/12/29/activitiren-wu-zeng-jia-shu-xing/</a></p>

<p>有了任务类型之后, 我们就可以将哪些任务需要自动流转配置起来.</p>

<p>这个方案的问题在于(绝大部分情况下不是问题): 这里实现的自动生效的不是实时的(即使我们的异步任务足够频繁).</p>

<h4 id="2.4 对比选择">2.4 对比选择</h4>


<p>下面是几种实现方式的对比:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">成本 </th>
<th style="text-align:center;"> ServiceTask </th>
<th style="text-align:center;"> 主动触发UserTask </th>
<th style="text-align:center;"> 异步触发UserTask </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">设计成本 </td>
<td style="text-align:center;"> 需要知道具体的执行类或者Bean </td>
<td style="text-align:center;">  </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td style="text-align:center;">触发成本 </td>
<td style="text-align:center;">  </td>
<td style="text-align:center;"> 需要业务主动触发, 逻辑复杂 </td>
<td style="text-align:center;"> </td>
</tr>
<tr>
<td style="text-align:center;">配置成本 </td>
<td style="text-align:center;">  </td>
<td style="text-align:center;">  </td>
<td style="text-align:center;"> 需要配置：任务类型 - 是否自动完成任务 </td>
</tr>
</tbody>
</table>


<p>倾向于使用 异步触发UserTask 这个方案, 成本和问题都比较小.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activiti事件处理]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2016/12/29/activitishi-jian-chu-li/"/>
    <updated>2016-12-29T18:39:59+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2016/12/29/activitishi-jian-chu-li</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86">1.事件处理</a></li>
<li><a href="#2.Listener%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">2.Listener异常处理</a></li>
<li><a href="#3.Listener%E6%B3%A8%E5%86%8C">3.Listener注册</a></li>
</ul>


<h2 id="1.事件处理">1.事件处理</h2>


<p>Activiti 内部充斥着各种各样的事件，详见：org.activiti.engine.delegate.event.ActivitiEventType的定义。</p>

<p>在 Activiti 5.15 以前，处理事件需要在流程设计的时候显示的加入各种Listener，比如：</p>

<pre><code>        &lt;userTask id="leaderVerifyTask" activiti:taskType="2"&gt;
            &lt;extensionElements&gt;
                &lt;activiti:taskListener event="create" delegateExpression="${taskCreateListener}"/&gt;
                &lt;activiti:taskListener event="assignment" delegateExpression="${taskAssignmentListener}"/&gt;
                &lt;activiti:taskListener event="complete" delegateExpression="${taskCompleteListener}"/&gt;
            &lt;/extensionElements&gt;
        &lt;/userTask&gt;
</code></pre>

<p>Spring会注入 taskCreateListener 这个bean来作为 leaderVerifyTask 这个任务的创建事件响应逻辑。
这种方式的问题在于，流程设计的时候需要知道 代码中具体的类或者bean的名称，因此无法做到将流程的设计交与开发人员之外的人来做。</p>

<p> 在 Activiti 5.15 中加入了全局的事件监听器 ActivitiEventListener，我们只需要实现一个自己的全局的事件处理器，然后自定义各种事件的处理器。</p>

<pre><code class="`"> /**
 * 流程服务的全局 Listener
 *
 * @author xiaobaoqiu  Date: 16-12-19 Time: 下午7:16
 */
public class GlobalProcessEventListener implements ActivitiEventListener {

    /**
     * 各类 Event 的处理器
     * 其中事件类型参见 ActivitiEventType 定义
     *
     * @see org.activiti.engine.delegate.event.ActivitiEventType
     */
    private Map&lt;ActivitiEventType, ProcessEventHandler&gt; handlers = new HashMap&lt;&gt;();

    @Override
    public void onEvent(ActivitiEvent event) {
        ProcessEventHandler handler = handlers.get(event.getType());
        if (handler != null) {
            handler.handle(event);
        }
    }

    @Override
    public boolean isFailOnException() {
        return false;
    }

    public Map&lt;ActivitiEventType, ProcessEventHandler&gt; getHandlers() {
        return handlers;
    }

    public void setHandlers(Map&lt;ActivitiEventType, ProcessEventHandler&gt; handlers) {
        this.handlers = handlers;
    }
}

/**
 * 流程事件处理
 *
 * @author xiaobaoqiu  Date: 16-12-21 Time: 下午1:33
 */
public interface ProcessEventHandler {

    void handle(ActivitiEvent event);
}
</code></pre>

<p>ActivitiEventListener能做到和流程设计无关，只需要在配置 Activiti 的时候将其注入，并且可以在其中配置能处理哪些类型的事件：</p>

<pre><code>    &lt;bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration"&gt;
        &lt;property 其他配置 /&gt;
        &lt;property name="eventListeners"&gt;
            &lt;list&gt;
                &lt;ref bean="globalProcessEventListener"/&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;


    &lt;!--流程全局事件处理器--&gt;
    &lt;bean id="globalProcessEventListener" class="com.qunar.scm.ct.biz.process.event.GlobalProcessEventListener"&gt;
        &lt;property name="handlers"&gt;
            &lt;map&gt;
                &lt;entry key="TASK_CREATED"&gt;
                    &lt;bean class="com.qunar.xxx.ProcessProcessTaskCreateListener"/&gt;
                &lt;/entry&gt;
                &lt;entry key="TASK_COMPLETED"&gt;
                    &lt;bean class="com.qunar.xxx.ProcessProcessTaskCompleteListener"/&gt;
                &lt;/entry&gt;
                &lt;entry key="TASK_ASSIGNED"&gt;
                    &lt;bean class="com.qunar.xxx.ProcessProcessTaskAssignmentListener"/&gt;
                &lt;/entry&gt;
            &lt;/map&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
</code></pre>

<p>参考：
<a href="https://www.activiti.org/userguide/index.html#eventDispatcherConfiguration">https://www.activiti.org/userguide/index.html#eventDispatcherConfiguration</a></p>

<h2 id="2.Listener异常处理">2.Listener异常处理</h2>


<p>需要注意的一点是 GlobalProcessEventListener 中的异常处理,我们在实现 GlobalProcessEventListener 的时候,ActivitiEventListener有一个接口需要实现:</p>

<pre><code>    /**
     * @return whether or not the current operation should fail when this listeners execution
     * throws an exception. 
     */
    boolean isFailOnException();
</code></pre>

<p>即当 listener 抛出一个异常的时候,当前操作时序应该失败(其实就是是否需要吞掉 listener 的异常).</p>

<p>我们可以看看 Activiti 相关的源代码,在 ActivitiEventSupport 中的 dispatchEvent 函数,我们可以清晰的看到,listener.isFailOnException()为false则会讲异常吞掉,只是打一行日志.</p>

<pre><code>    protected void dispatchEvent(ActivitiEvent event, ActivitiEventListener listener) {
        try {
            listener.onEvent(event);
        } catch (Throwable t) {
            if (listener.isFailOnException()) {
                throw new ActivitiException("Exception while executing event-listener", t);
            } else {
                // Ignore the exception and continue notifying remaining listeners. The
                // listener
                // explicitly states that the exception should not bubble up
                LOG.warn("Exception while executing event-listener, which was ignored", t);
            }
        }
    }
</code></pre>

<p>我的建议(也是我现在的做法)是:isFailOnException()设置为true,然后在对应的 ProcessEventHandler 自己处理需要吞掉异常的场景.</p>

<h2 id="3.Listener注册">3.Listener注册</h2>


<p>通常而言,我们的 ProcessEventHandler 需要使用到 Activiti 的Service,比如我的一个简单场景,我需要在 UserTask 获取一些业务信息,新词我需要使用 RuntimeService 来查询一些信息</p>

<pre><code>/**
 * 任务创建事件
 *
 * @author xiaobaoqiu  Date: 16-12-23 Time: 下午7:09
 */
public class ProcessTaskCreateListener extends AbstractProcessTaskListener {

    @Resource
    private RuntimeService runtimeService;
    ...
}
</code></pre>

<p>按照第一节的写法,就会出现Bean循环依赖的问题:</p>

<pre><code>1. ProcessEngineConfiguration 实例创建会触发 GlobalProcessEventListener 创建;
2.GlobalProcessEventListener 实例创建会触发 ProcessProcessTaskCreateListener 创建;
3.ProcessProcessTaskCreateListener 实例创建会触发 RuntimeService 创建;
4.RuntimeService 实例创建依赖 ProcessEngineFactoryBean 创建;
5.ProcessEngineFactoryBean 创建依赖 ProcessEngineConfiguration实例;
</code></pre>

<p>并且 ProcessEngineFactoryBean 是 Activiti 自己实现的 FactoryBean,用来获得 ProcessEngine 实例 :</p>

<pre><code>public class ProcessEngineFactoryBean implements FactoryBean&lt;ProcessEngine&gt;, DisposableBean, ApplicationContextAware {
    ...
}
</code></pre>

<p>这个问题一个比较好的解法是, 将 GlobalProcessEventListener 的注册延后到 GlobalProcessEventListener 初始化完成之后,因此涉及到两个问题:</p>

<pre><code>1.GlobalProcessEventListener 什么时机去做自己注册;
2.GlobalProcessEventListener 如何将自己注册到 SpringProcessEngineConfiguration 中;
</code></pre>

<p>其中第一个问题很好回答, GlobalProcessEventListener 自己初始化完成之后去自注册,这个时候依赖的各种Bean已经创建初始化完成了.因此只需要实现 ApplicationContextAware 接口,然后在 setApplicationContext 中做注册的工作.</p>

<pre><code>public class GlobalProcessEventListener implements ActivitiEventListener, ApplicationContextAware {
    /**
     * 将当前 EventListener 注册到 Activiti 中
     */
    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        ...
    }
}
</code></pre>

<p>第二个问题,如何自己注册上去,这个看看源代码就会找到方法, 我们在配置文件中给 SpringProcessEngineConfiguration 配置 EventListener 调用的其实是 setEventListeners 方法</p>

<pre><code>  public void setEventListeners(List&lt;ActivitiEventListener&gt; eventListeners) {
      this.eventListeners = eventListeners;
  }
</code></pre>

<p>我们看远吗发现其中使用 eventListeners 的只有一个地方,就是将其赋值给 ActivitiEventDispatcher</p>

<pre><code>    if(eventListeners != null) {
        for(ActivitiEventListener listenerToAdd : eventListeners) {
            this.eventDispatcher.addEventListener(listenerToAdd);
        }
    }
</code></pre>

<p>而 ActivitiEventDispatcher 才是使用  EventListener 的地方.我们再看源码发现 ActivitiEventDispatcher 提供了 addEventListener 的入口</p>

<pre><code>public interface ActivitiEventDispatcher {

    /**
     * Adds an event-listener which will be notified of ALL events by the dispatcher.
     * @param listenerToAdd the listener to add
     */
    void addEventListener(ActivitiEventListener listenerToAdd);

    /**
     * Adds an event-listener which will only be notified when an event of the given types occurs.
     * @param listenerToAdd the listener to add
     * @param types types of events the listener should be notified for
     */
    void addEventListener(ActivitiEventListener listenerToAdd, ActivitiEventType... types);
</code></pre>

<p>并且 SpringProcessEngineConfiguration 有 getEventDispatcher 来获得 ActivitiEventDispatcher 实例,因此我们可以通过 getEventDispatcher 来拿到 ActivitiEventDispatcher 实例,然后将当前的 EventListener 通过 addEventListener 的方法增加到 ActivitiEventDispatcher 的 EventListener 列表中.</p>

<p>因此,最终的实现代码很简单:</p>

<pre><code>    /**
     * 将当前 EventListener 注册到 Activiti 中
     */
    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        SpringProcessEngineConfiguration configuration = applicationContext.getBean(SpringProcessEngineConfiguration.class);
        configuration.getEventDispatcher().addEventListener(this);
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activiti任务增加属性]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2016/12/29/activitiren-wu-zeng-jia-shu-xing/"/>
    <updated>2016-12-29T18:18:20+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2016/12/29/activitiren-wu-zeng-jia-shu-xing</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1.%E4%BB%BB%E5%8A%A1%E5%A2%9E%E5%8A%A0%E5%B1%9E%E6%80%A7">1.任务增加属性</a></li>
</ul>


<p>最近逐步将组内的审核业务迁移到 Activiti 上，为了适配已有业务，需要原生的 Activiti 的用户任务上增加一些属性，比如用户任务(UserTask)增加类型属性等。
Activiti版本为：5.22.0</p>

<h2 id="1.任务增加属性">1.任务增加属性</h2>


<p>下面以增加任务类型为例子，记录修改点：</p>

<pre><code>1.修改表结构，ACT_RU_TASK表增加 TASK_TYPE_ 字段
在 activiti-engine 包下，找自己对应的数据库的文件(mysql版本...)

1.UserTask增加taskType属性
包路径：org.activiti.bpmn.model.UserTask

3.Task接口增加setTaskType方法
包路径：org.activiti.engine.task.Task

4.TaskEntity增加taskType属性
包路径：org.activiti.engine.impl.persistence.entity.TaskEntity

5.DelegateTask借口增加 getTaskType 和 setTaskType
包路径：org.activiti.engine.delegate.DelegateTask

6.TaskDefinition增加taskTypeExpression
包路径：org.activiti.engine.impl.task.TaskDefinition

7.DynamicBpmnConstants增加USER_TASK_TYPE
包路径：org.activiti.engine.DynamicBpmnConstants

8.UserTaskActivityBehavior设置taskType属性
包路径：org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior

9.UserTaskParseHandler解析taskType属性
包路径：org.activiti.engine.impl.bpmn.parser.handler.UserTaskParseHandler

10.BpmnXMLConstants增加 ATTRIBUTE_TASK_USER_TYPE
包路径：org.activiti.bpmn.constants.BpmnXMLConstants

11.UserTaskXMLConverter注册 ATTRIBUTE_TASK_USER_TYPE
包路径：org.activiti.bpmn.converter.UserTaskXMLConverter

12. Semantic.xsd 文件
包括各个版本的 XSD 文件(XML结构定义)

13. HistoricTaskWrapper 增加 taskType
包路径：org.activiti.explorer.ui.task.data.HistoricTaskWrapper

14.HistoricTaskInstanceEntity 增加 taskType
包路径：org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntity

15. 更多...
</code></pre>

<p>在自己的API中定义任务类型，然后我们可以修改 activiti-modeler 的相关代码，使得Activiti支持画图时候指定任务类型。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activiti表]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2016/12/16/activitibiao/"/>
    <updated>2016-12-16T16:31:34+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2016/12/16/activitibiao</id>
    <content type="html"><![CDATA[<p>整理 Activiti 中的表含义，以及一些重要表的字段。本文的 Activiti 版本为 5.22.0</p>

<ul>
<li><a href="#1.%E8%A1%A8%E5%90%AB%E4%B9%89">1.表含义</a></li>
</ul>


<h2 id="1.表含义">1.表含义</h2>


<p>Activiti 中表定义 activiti-engine 这个 module 下，具体位置 /resources/org.activiti/db/create 下，包括各种类型数据库的建表语句，这里我们以Mysql为DB。</p>

<p>首先简单介绍表的前缀的含义，参考官网：<a href="http://www.activiti.org/userguide/index.html#database.tables.explained">http://www.activiti.org/userguide/index.html#database.tables.explained</a></p>

<p>表名称包含三个部分，第一个为所有的表共有的ACT_表示Activiti，第二部分表示表的使用场景</p>

<pre><code>
ACT_RE_*: RE表示repository，这个前缀的表包含了流程定义和流程静态资源
ACT_RU_*: RU表示runtime，这些运行时的表，包含流程实例，任务，变量，异步任务等运行中的数据。Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。
ACT_ID_*: ID表示identity，这些表包含身份信息，比如用户，组等。
ACT_HI_*: HI表示history，这些表包含历史数据，比如历史流程实例， 变量，任务等。
ACT_GE_*: 通用数据， 用于不同场景下。
ACT_EVT_*: EVT表示EVENT，目前只有一张表ACT_EVT_LOG，存储事件处理日志，方便管理员跟踪处理。
</code></pre>

<p>下面是各个表的大致意义：</p>

<table>
<thead>
<tr>
<th style="text-align:center;">表 </th>
<th style="text-align:left;"> 意义 </th>
<th style="text-align:left;"> 备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">ACT_EVT_LOG         </td>
<td style="text-align:left;"> 事件处理日志 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_GE_BYTEARRAY    </td>
<td style="text-align:left;"> 二进制数据表 </td>
<td style="text-align:left;"> 保存流程定义图片和xml </td>
</tr>
<tr>
<td style="text-align:center;">ACT_GE_PROPERTY     </td>
<td style="text-align:left;"> 属性数据表存储整个流程引擎级别的数据 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_ACTINST      </td>
<td style="text-align:left;"> 历史节点表 </td>
<td style="text-align:left;"> 只记录usertask内容 </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_ATTACHMENT   </td>
<td style="text-align:left;"> 历史附件表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_COMMENT      </td>
<td style="text-align:left;"> 历史意见表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_DETAIL       </td>
<td style="text-align:left;"> 历史详情表，提供历史变量的查询 </td>
<td style="text-align:left;"> 流程中产生的变量详细，包括控制流程流转的变量等</td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_IDENTITYLINK </td>
<td style="text-align:left;"> 历史流程人员表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_PROCINST     </td>
<td style="text-align:left;"> 历史流程实例表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_TASKINST     </td>
<td style="text-align:left;"> 历史任务实例表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_HI_VARINST      </td>
<td style="text-align:left;"> 历史变量表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_ID_GROUP        </td>
<td style="text-align:left;"> 用户组信息表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_ID_INFO         </td>
<td style="text-align:left;"> 用户扩展信息表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_ID_MEMBERSHIP   </td>
<td style="text-align:left;"> 用户与用户组对应信息表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_ID_USER         </td>
<td style="text-align:left;"> 用户信息表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_PROCDEF_INFO    </td>
<td style="text-align:left;">  </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RE_DEPLOYMENT   </td>
<td style="text-align:left;"> 部署信息表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RE_MODEL        </td>
<td style="text-align:left;"> 流程设计模型部署表 </td>
<td style="text-align:left;"> 流程设计器设计流程后，保存数据到该表 </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RE_PROCDEF      </td>
<td style="text-align:left;"> 流程定义数据表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RU_EVENT_SUBSCR </td>
<td style="text-align:left;"> throwEvent，catchEvent时间监听信息表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RU_EXECUTION    </td>
<td style="text-align:left;"> 运行时流程执行实例表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RU_IDENTITYLINK </td>
<td style="text-align:left;"> 运行时流程人员表，主要存储任务节点与参与者的相关信息 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RU_JOB          </td>
<td style="text-align:left;"> 运行时定时任务数据表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RU_TASK         </td>
<td style="text-align:left;"> 运行时任务节点表 </td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">ACT_RU_VARIABLE     </td>
<td style="text-align:left;"> 运行时流程变量数据表 </td>
<td style="text-align:left;"> </td>
</tr>
</tbody>
</table>


<p>参考：<a href="http://craft6.cn/detail/activiti_research_database.do">http://craft6.cn/detail/activiti_research_database.do</a>
<a href="http://blog.csdn.net/flygoa/article/details/51895228">http://blog.csdn.net/flygoa/article/details/51895228</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activiti入门]]></title>
    <link href="http://xiaobaoqiu.github.io/blog/2016/04/06/activitiru-men/"/>
    <updated>2016-04-06T10:09:38+08:00</updated>
    <id>http://xiaobaoqiu.github.io/blog/2016/04/06/activitiru-men</id>
    <content type="html"><![CDATA[<ul>
<li><a href="#1.%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86">1.工作流的基本知识</a>

<ul>
<li><a href="#1.1%20%E8%83%8C%E6%99%AF">1.1 背景</a></li>
<li><a href="#1.2%20%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">1.2 工作流使用场景</a></li>
<li><a href="#1.3%20BPMN%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0">1.3 BPMN基本元素</a></li>
</ul>
</li>
<li><a href="#2.%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E">2.常见的工作流引擎</a>

<ul>
<li><a href="#2.1%20jBPM">2.1 jBPM</a></li>
<li><a href="#2.2%20Activiti">2.2 Activiti</a></li>
<li><a href="#2.3%20FixFlow">2.3 FixFlow</a></li>
<li><a href="#2.4%20%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9">2.4 如何选择</a></li>
</ul>
</li>
<li><a href="#3.Activiti">3.Activiti</a>

<ul>
<li><a href="#3.1%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">3.1 如何使用</a></li>
</ul>
</li>
<li><a href="#4.%E4%B8%9A%E5%8A%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%B5%81">4.业务如何使用工作流</a></li>
</ul>


<p>最近在项目中涉及到工作流的知识,需要调研各个工作流引擎,顺道总结.</p>

<p>如何做流程服务,通常而言两种选择(在我的认知范围内的):</p>

<pre><code>1.状态机
2.工作流
</code></pre>

<p>状态机通常意味着需要和业务状态绑定在一起,因此无法做到业务和流程分离,通常的后果就是业务和流程紧耦合.</p>

<p>因此,当我们的多个业务系统涉及到流程时候,可以考虑工作流.</p>

<h2 id="1.工作流的基本知识">1.工作流的基本知识</h2>


<h4 id="1.1 背景">1.1 背景</h4>


<p>先介绍几个术语:</p>

<pre><code>1.BPM
业务流程管理(Business Process Management),基本内容是管理既定工作的流程,通过服务编排,统一调控各个业务流程,以确保工作在正确的时间被正确的人执行,达到优化整体业务过程的目的.
BPM概念的贯彻执行,需要有标准化的流程定义语言来支撑,使用统一的语言遵循一致的标准描述具体业务过程,这些流程定义描述由专有引擎去驱动执行,这个引擎就是工作流引擎.

2.Workflow
全部或者部分由计算机支持或自动处理的业务过程

3.WfMC
工作流管理联盟

4.BPMN
业务流程建模与标注(Business Process Modeling Notation),又叫业务流程建模符号.可以理解为工作流的建模语言.2004年5月发布了BPMN1.0规范.2011年BPMN2.0新规范的发布为各工作流产品互容互通提供了统一的标准,结束了各工作流厂商各自为政相互抵斥的局面.
</code></pre>

<p>参考:
<a href="http://www.infoq.com/cn/articles/bpmn2-activiti5">BPMN2新规范与Activiti5</a>
<a href="http://www.omg.org/spec/BPMN/2.0/">BPMN2.0规范</a></p>

<h4 id="1.2 工作流使用场景">1.2 工作流使用场景</h4>


<p>具体什么场景下适合使用工作流,参考前任的总结:</p>

<p><a href="http://stackoverflow.com/questions/104099/when-to-use-windows-workflow-foundation">when-to-use-windows-workflow-foundation</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>You may need WF only if any of the following are true:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1.You have a long-running process.
</span><span class='line'>2.You have a process that changes frequently.
</span><span class='line'>3.You want a visual model of the process</span></code></pre></td></tr></table></div></figure>
我理解,注意这里的第三点说的流程可视化的目的并不是为了展示,而是说工作流提供了一种给非开发人员(如运营人员)在线修改流程并且流程实时生效的途径(当然,需要业务支持).</p>

<p><a href="http://programmers.stackexchange.com/questions/103972/when-to-use-workflow-engines">when-to-use-workflow-engines</a>
<code>
A workflow engine is useful when you need to go from a start to a finish but there are many different paths/logic/rules to get there.
if you have processes that are variable from start to end, use a workflow. If the same process can be used by everyone, then you don't need a workflow.
</code></p>

<h4 id="1.3 BPMN基本元素">1.3 BPMN基本元素</h4>


<p>简单介绍BPMN中的基本元素,详细内容可以在<a href="http://www.omg.org/spec/BPMN/2.0/">BPMN 2.0规范官网</a>下载PDF版本(章节7.2).包含5个基本元素,每个基本元素下面又包含集中类型的元素,其中Flow Objects是最重要的:</p>

<pre><code>1. Flow Objects 流对象
2. Data 数据
3. Connecting Objects 连接对象
4. Swimlanes 泳道
5. Artifacts 工件
</code></pre>

<h5>(1).Flow Objects</h5>

<p>Flow Objects包含了工作流的三个基本执行语义</p>

<pre><code>(1).Events 事件
发生在流程执行过程中的事情.像流程的启动,结束,边界条件以及每个活动的创建,开始,流转等都是流程事件,利用事件机制,可以通过事件控制器为系统增加辅助功能.如其它业务系统集成及活动预警等

(2).Activities 活动
在工作流中所有具备生命周期状态的都可以称之为活动,如原子级的任务(Task)以及子流程(Sub-Process)等.任务是流程模型中最小工作单元,不能继续分解.

(3).Gateways 网关
Gateways用来决定流程流转指向的,简单理解就是判断条件.比如同意走一个流程,驳回走另外一个流程.
</code></pre>

<p>事件有三种类型:Start, Intermediate, End</p>

<h5>(2).Data</h5>

<pre><code>Data Objects 数据对象
Data Inputs 数据输入
Data Outputs 数据输出
Data Stores 数据存储
</code></pre>

<h5>(3).Connecting Objects</h5>

<p>连接对象用来把各个流对象或流对象与其他信息连接起来
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1).Sequence Flows 序列流
</span><span class='line'>表示流对象的前后执行顺序&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(2).Message Flows 消息流
</span><span class='line'>表示公开流程或协作模型里参与者之间的消息,交互&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(3).Associations 结合关系
</span><span class='line'>为流程中的元素关联信息或数据&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(4).Data Associations 数据结合关系
</span><span class='line'>表示数据在流程、活动和数据对象之间的传递</span></code></pre></td></tr></table></div></figure></p>

<h5>(4).Swimlanes</h5>

<p>使用泳道来区分不同部门或者不同参与者的功能和职责。
<code>
Pools 池
Lanes 道
</code></p>

<h5>(5).Artifacts</h5>

<pre><code>Group 组
Text Annotation 文本注释
</code></pre>

<p>各种基本元素的示意图字节参考BPMN 2.0规范给出的图吧:</p>

<p><img src="/images/workflow/BPMN_model_1.png"></p>

<p><img src="/images/workflow/BPMN_model_2.png"></p>

<p>几个在线画图的应用如<a href="www.processon.com">processon</a>都支持BPMN图形.</p>

<p>参考:
<a href="http://blog.csdn.net/ronghao100/article/details/6707276">BPMN这点事-BPMN基本元素（上）</a>
<a href="http://blog.csdn.net/ronghao100/article/details/6711779">BPMN这点事-BPMN基本元素（下）</a></p>

<h2 id="2.常见的工作流引擎">2.常见的工作流引擎</h2>


<h4 id="2.1 jBPM">2.1 jBPM</h4>


<p><a href="http://www.jbpm.org/">jBPM官网</a></p>

<h4 id="2.2 Activiti">2.2 Activiti</h4>


<p><a href="http://www.activiti.org/">Activiti官网</a>
<a href="http://www.activiti.org/">Activiti用户手册</a>
<a href="http://www.mossle.com/docs/activiti/index.html">Activiti 5.16 用户手册中文版</a></p>

<h4 id="2.3 FixFlow">2.3 FixFlow</h4>


<p>FixFlow国人开发的工作流引擎
<a href="https://github.com/fixteam/fixflow">FixFlow github地址</a></p>

<h4 id="2.4 如何选择">2.4 如何选择</h4>


<p>主要从易用性,维护成本等几个角度考虑:</p>

<pre><code>1.流程设计器的支持;
2.嵌入到业务的成本,比如对Spring的支持等;
3.事务支持;
4.使用范围
</code></pre>

<p>目前来看,Activiti的使用是最简单方便的.</p>

<h2 id="3.Activiti">3.Activiti</h2>


<p>支持最新BPMN2.0规范的开源工作流引擎Activit5,实现了对规范的绝大多数图元的定义(包括一些自己的扩展定义),能够满足企业工作流的各种复杂应用.
它是一个无侵入的,支持嵌入式和独立部署的开源工作流引擎,是Tom Bayen离开jBoss加入Alfresco公司后的另立山头之作.</p>

<p>关于Activiti的一些关键特性:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>支持的流程格式: BPMN2、xPDL、jPDL等
</span><span class='line'>引擎核心: PVM（流程虚拟机）
</span><span class='line'>技术前身: jBPM3、jBPM4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;数据库持久层: ORM MyBatis3
</span><span class='line'>事务管理: MyBatis机制/Spring事务控制
</span><span class='line'>数据库连接方式: Jdbc/DataSource
</span><span class='line'>支持数据库: Oracle、SQL Server、MySQL等多数数据库
</span><span class='line'>集成接口: SOAP、Mule、RESTful</span></code></pre></td></tr></table></div></figure></p>

<p>几个关键的概念:</p>

<pre><code>    1.流程定义
    BPMN语法定义的流程定义;比如请假流程定义:开始--&gt;申请人发起--&gt;直属leader审批--&gt;部门leader审批--&gt;人力审批--&gt;结束;

    2.流程实例
    启动一个流程case,比如张三发起一个请假流程,这时候就会生成一个请假流程的实例;

    3.历史流程实例
    已经结束的流程,还是可以被查询到

    4.任务
    最常见的用户任务,即需要人参与的流程节点. 比如请假流程中的直属leader审批这个节点就会生成一个用户任务.
</code></pre>

<h4 id="3.1 如何使用">3.1 如何使用</h4>


<p>这里主要大致说一下怎么结合Spring使用Activiti</p>

<p>Maven依赖
<code>
&lt;dependency&gt;
    &lt;groupId&gt;org.activiti&lt;/groupId&gt;
    &lt;artifactId&gt;activiti-engine&lt;/artifactId&gt;
    &lt;version&gt;5.14&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.activiti&lt;/groupId&gt;
    &lt;artifactId&gt;activiti-spring&lt;/artifactId&gt;
    &lt;version&gt;5.14&lt;/version&gt;
&lt;/dependency&gt;
</code>
其中activiti-spring主要是提供了SpringProcessEngineConfiguration这个配置入口,并且提供ProcessEngineFactoryBean这个流程引擎的Bean,通过这个Bean,我们就可以获取Activiti内部的各种Service:</p>

<pre><code>RepositoryService
RuntimeService
TaskService
HistoryService
ManagementService
IdentityService
FormService
</code></pre>

<p>activiti将其内部的表的建表语句和对应的Mybatis配置文件都打包在依赖jar包中,可以参考activiti-engine中的org.activiti.db这个包路径下的内容.</p>

<p><a href="http://www.tuicool.com/articles/NBZNFvF">整合Acitiviti在线流程设计器</a>
<a href="http://www.ibm.com/developerworks/cn/java/j-lo-activiti1/">Activiti - 新一代的开源 BPM 引擎</a>
<a href="http://www.infoq.com/cn/articles/bpmn2-activiti5">http://www.infoq.com/cn/articles/bpmn2-activiti5</a></p>

<h2 id="4.业务如何使用工作流">4.业务如何使用工作流</h2>


<p>一般使用方式两种:</p>

<pre><code>    1.独立部署的工作流服务
    对外服务方式: 接口
    和业务交互方式: 接口或者MQ
    优点: 彻底隔离工作流和业务;可以为多套业务提供服务;
    缺点: 无法保证业务数据的强一致性

    2.嵌入到业务系统
    和业务交互方式: 直接调用
    优点: 能保证业务数据的强一致性
    缺点: 每套业务都需要自己单独使用工作流(存在重复工作)
</code></pre>
]]></content>
  </entry>
  
</feed>
